<?xml version="1.0"?>
<!--
*********************************************************************
FrameWorX: FwxServer Configuration File
Copyright (c) 1986-2013 ICONICS, Inc.
*********************************************************************
-->
<configuration>
  <configSections>
    <section name="VersionInfo" type="System.Configuration.DictionarySectionHandler" />
    <section name="Opc.Ua.Server" type="Opc.Ua.ApplicationConfigurationSection,Opc.Ua.Core"/>
    <section name="system.data" type="System.Data.Common.DbProviderFactoriesConfigurationHandler, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>
    <section name="FwxServer.Security" type="Ico.FwxServer.Security.SecurityConfigurationSection, FwxServerSecurity"/>
  </configSections>
  
	<VersionInfo>
    <!--<add key="CompanyName" value="ICONICS, Inc." />-->
		<!--<add key="ProductName" value="FrameWorX" />-->
		<!--<add key="ProductVersion" value="10.80.0.0" />-->
	</VersionInfo>

  <!-- GridWorX DbProviderFactory for IcoRemoting Service -->
  <system.data>
    <DbProviderFactories>
      <add name="ICONICS Remoting Data Provider" invariant="Ico.Remoting.DataProvider" description=".NET Framework Data Provider for ICONICS Remoting Service" type="Ico.Remoting.DataProvider.RemotingProviderFactory, IcoRemotingDataProvider"/>
    </DbProviderFactories>
  </system.data>

  <system.serviceModel>

    <!-- 
      UA servers built with the SDK use the Opc.Ua.SessionEndpoint class to implement the ISessionEndpoint 
      contract. It is possible to add additional behavoirs in the configuration file by referencing this 
      service. For example, the configuration in this file turns on metadata publishing. 
    -->

    <services>
      <service name="Opc.Ua.SessionEndpoint" behaviorConfiguration="Opc.Ua.SessionEndpoint.Behavior">
        <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>
      </service>

      <!-- 
        Following is the setting for IPolicyRetriever
      -->
      <service behaviorConfiguration="Ico.Fwx.Communication.Server.FwxStandardAsyncService.Behavior" name="Ico.Fwx.Communication.Server.PolicyRetriever">
        <endpoint address="http://localhost:8776/" binding="webHttpBinding" contract="Ico.Fwx.Communication.Server.IPolicyRetriever"/>
      </service>

      <!-- 
        Following is the setting for FwxAsyncService
      -->
      <service behaviorConfiguration="Ico.Fwx.Communication.Server.FwxStandardAsyncService.Behavior" name="Ico.Fwx.Communication.Server.FwxStandardAsyncService">
        <!-- Binary encoding over HTTP transport for Silverlight
        <endpoint address="http://localhost:80/fwxserver" binding="customBinding" bindingConfiguration="BinaryHttp_IAsyncServer" contract="Ico.Fwx.Communication.Core.IAsyncServer">
          <identity>
            <dns value="localhost"/>
          </identity>
        </endpoint>
        -->

        <!--not authenticated endpoints-->
        <endpoint address="http://localhost:80/fwxserver" binding="basicHttpBinding" bindingConfiguration="BasicHttp_IAsyncServer" contract="Ico.Fwx.Communication.Core.IAsyncServer"/>
        <endpoint address="https://localhost:443/BasicHttps" binding="basicHttpBinding" bindingConfiguration="BasicHttps_IAsyncServer" contract="Ico.Fwx.Communication.Core.IAsyncServer"/>
        <endpoint address="http://localhost:80/WSHttp" binding="wsHttpBinding" bindingConfiguration="WSHttp_IAsyncServer" contract="Ico.Fwx.Communication.Core.IAsyncServer"/>
        <endpoint address="net.tcp://localhost:8778" binding="netTcpBinding" bindingConfiguration="NetTcp_IAsyncServer" contract="Ico.Fwx.Communication.Core.IAsyncServer"/>
        <endpoint address="net.pipe://localhost/fwxserver" binding="netNamedPipeBinding" bindingConfiguration="NetNamedPipe_IAsyncServer" contract="Ico.Fwx.Communication.Core.IAsyncServer"/>
        <!-- Endpoint for Silverlight NET.TCP, port must be in range 4502-4534 -->
        <endpoint address="net.tcp://localhost:4510" binding="netTcpBinding" bindingConfiguration="NetTcp_IAsyncServer" contract="Ico.Fwx.Communication.Core.IAsyncServer"/>

        <!--ntlm authenticated endpoints-->
        <endpoint address="http://localhost:80/BasicHttp_Auth" binding="basicHttpBinding" bindingConfiguration="BasicHttp_Auth_IAsyncServer" contract="Ico.Fwx.Communication.Core.IAsyncServer"/>
        <endpoint address="https://localhost:443/BasicHttps_Auth" binding="basicHttpBinding" bindingConfiguration="BasicHttps_Auth_IAsyncServer" contract="Ico.Fwx.Communication.Core.IAsyncServer"/>
        <endpoint address="http://localhost:80/WSHttp_Auth" binding="wsHttpBinding" bindingConfiguration="WSHttp_Auth_IAsyncServer" contract="Ico.Fwx.Communication.Core.IAsyncServer"/>
        <endpoint address="net.tcp://localhost:8778/NetTcp_Auth" binding="netTcpBinding" bindingConfiguration="NetTcp_Auth_IAsyncServer" contract="Ico.Fwx.Communication.Core.IAsyncServer"/>

        <!-- endpoint using certificate security-->
        <endpoint address="http://localhost:80/WSHttp_Cert" binding="wsHttpBinding" bindingConfiguration="WSHttp_Cert_IAsyncServer" contract="Ico.Fwx.Communication.Core.IAsyncServer"/>

        <host>
          <baseAddresses>
            <add baseAddress="http://localhost:8731/Design_Time_Addresses/FwxStandardAsyncService/"/>
          </baseAddresses>
        </host>
      </service>

      <!-- 
        Following is the setting for reverse Fwx communication
      -->
      <service behaviorConfiguration="Ico.Fwx.Communication.Server.FwxStandardAsyncService.Behavior" name="Ico.Fwx.Communication.Network.ReverseAsyncService">
        <endpoint address="http://localhost:80/BasicHttpReverse" binding="basicHttpBinding" bindingConfiguration="BasicHttp_IAsyncServer" contract="Ico.Fwx.Communication.Core.IReverseAsyncServer"/>
        <!--<endpoint address="http://localhost:9777/WSHttp" binding="wsHttpBinding" bindingConfiguration="WSHttp_IAsyncServer" contract="Ico.Fwx.Communication.Core.IReverseAsyncServer"/>-->
        <endpoint address="net.tcp://localhost:9778/NetTcp" binding="netTcpBinding" bindingConfiguration="NetTcp_IAsyncServer" contract="Ico.Fwx.Communication.Core.IReverseAsyncServer"/>
        <host>
          <baseAddresses>
            <add baseAddress="http://localhost:9731/Design_Time_Addresses/ReverseAsyncService/"/>
          </baseAddresses>
        </host>
      </service>
    </services>

    <behaviors>
      <!-- Servers deployed in production environments should turn the httpGetEnabled and includeExceptionDetailInFaults options off -->
      <!-- Start of section used by FwxServer -->
      <!-- OPC UA service behavior-->
      <serviceBehaviors>
        <behavior name="Opc.Ua.SessionEndpoint.Behavior">
          <serviceMetadata httpGetEnabled="true"/>
          <serviceDebug includeExceptionDetailInFaults="true"/>
          <dataContractSerializer maxItemsInObjectGraph="4000000"/>
        </behavior>

        <!-- FwxServer service behavior-->
        <behavior name="Ico.Fwx.Communication.Server.FwxStandardAsyncService.Behavior">
          <serviceMetadata httpGetEnabled="true"/>
          <serviceDebug includeExceptionDetailInFaults="true"/>
          <dataContractSerializer maxItemsInObjectGraph="4000000"/>
          
          <serviceCredentials>
            <!-- This is the FwxServer certificate -->
            <serviceCertificate storeLocation="LocalMachine" storeName="My" x509FindType="FindByIssuerName" findValue="FrameWorX Server"/>
            <clientCertificate>
              <!-- Authentication method for FwxClients-->
              <authentication certificateValidationMode="PeerTrust"/>
            </clientCertificate>
          </serviceCredentials>
          
        </behavior>

      </serviceBehaviors>
    
      <!-- FwxServer service client-side behavior-->
      <endpointBehaviors>
        <behavior name="Ico.Fwx.Communication.Server.FwxStandardAsyncService.Behavior">
          <dataContractSerializer maxItemsInObjectGraph="4000000"/>
        </behavior>
      </endpointBehaviors>
    </behaviors>

    <bindings configSource="IcoCommunication.Bindings.config.xml"/>
    <client configSource="IcoCommunication.Client.config.xml"/>

    <!--
      Uncommenting this <diagnostics> block will turn on message logging. The contents and the location of the
      log file are specified in the  <system.diagnostics> block.

    <diagnostics>
      <messageLogging logEntireMessage="true" maxMessagesToLog="3000" logMessagesAtServiceLevel="true" logMalformedMessages="true" logMessagesAtTransportLevel="true"/>
    </diagnostics>
    -->

  </system.serviceModel>

  <!--
  <system.diagnostics>
    <sources>
      <source name="System.ServiceModel.MessageLogging">
        <listeners>
          <add name="messages" type="System.Diagnostics.XmlWriterTraceListener" initializeData="c:\logs\FwxAsyncServer.svclog"/>
        </listeners>
      </source>

      <source name="System.ServiceModel" switchValue="Warning">
        <listeners>
          <add name="xml"/>
        </listeners>
      </source>
      <source name="myUserTraceSource" switchValue="Warning, ActivityTracing">
        <listeners>
          <add name="xml"/>
        </listeners>
      </source>

    </sources>
    <sharedListeners>
      <add name="xml" type="System.Diagnostics.XmlWriterTraceListener" initializeData="C:\logs\Traces.svclog"/>
    </sharedListeners>
  </system.diagnostics>
  -->

  <appSettings>
    <add key="TraceCategoryName" value="IcoFwxServer.exe"/>
    <add key="TraceCategoryDisplayName" value="Framework Server"/>
    <add key="TraceCategoryConfigurationScope" value="Machine|Assembly"/>
    <add key="HyperHistorianName" value="HyperHistorian"/>
    <add key="HyperHistorianRootFolder" value="Configuration"/>
  </appSettings>

  <runtime>
    <gcServer enabled="true"/>
    <gcConcurrent enabled="false"/>
  </runtime>

  <Opc.Ua.Server>
    <ConfigurationLocation xmlns="http://opcfoundation.org/UA/SDK/Configuration.xsd">
      <FilePath>FwxServer.OpcUa.config</FilePath>
    </ConfigurationLocation>
  </Opc.Ua.Server>

  <FwxServer.Security>
    <SecurityConfiguration>
      <GenerallyAllowedMethods>
        <string>AlarmAck</string>
        <string>AlarmAckEx</string>
        <!-- Workbench Methods -->
        <string>GetActiveCfg</string>
        <string>GetActiveConnection</string>
        <string>GetConfiguratorId</string>
        <string>GetServiceStatus</string>
        <string>SetActiveCfg</string>
        <string>StartService</string>
        <string>StopService</string>
        <!-- End of Workbench Methods -->
        <string>ResolveAliases</string>
        <string>LogSimpleEv</string>
        <string>LogTrackEv</string>
        <string>GetSvcInfo</string>
        <string>OPCAE_QryAttrs</string>
        <string>OPCAE_QryCats</string>
        <string>PhonePush_GetGlobalSubscriptions</string>
        <string>PhonePush_GetMobileHMILicenseState</string>
        <string>PhonePush_Subscribe</string>
        <string>PhonePush_SubscribeEx</string>
        <string>MakeActive</string>
        <!-- BACnet Methods -->
        <string>ClearCache</string>
        <string>ClearDevicesFromCache</string>
        <string>ClearObjectsFromCache</string>
        <string>LoadBDT</string>
        <string>SaveBDT</string>
        <string>DeviceCommunicationControl</string>
        <string>ReinitializeDevice</string>
        <string>TimeSynchronization</string>
        <string>WhoHas</string>
        <string>BackupDevice</string>
        <string>RestoreDevice</string>
        <string>GetBackupedConfigurations</string>
        <string>RemoveBackupedConfigurations</string>
        <string>ObjectCreate</string>
        <string>ObjectModify</string>
        <string>ObjectDelete</string>
        <string>ObjectRead</string>
        <string>ObjectReadMulti</string>
        <string>ObjectReadPropertyList</string>
        <string>ObjectGetValidInstance</string>
        <string>ModifyArrayProperty</string>
        <string>IsObjectAccessible</string>
        <string>StopScanningDevices</string>
        <string>ImportEdeRecords</string>
        <string>SaveBACnetCache</string>
        <string>AddDeviceToAlarmCache</string>
        <string>RemoveDeviceFromAlarmCache</string>
        <string>IsDeviceInAlarmCache</string>
        <string>RefreshDevice</string>
        <string>GetPropertiesInfo</string>
        <!-- BACnet Methods -->
      </GenerallyAllowedMethods>
      <MiddleTierApps>
        <string>IcoFwxServerHost</string>
        <string>IcoFwxServer</string>
        <string>FwxAssetCatalogService</string>
        <string>IcoBizVizEAService</string>
        <string>IcoBizVizFAService</string>
        <string>HHCollectorHost</string>
        <string>HHCollectorService</string>
        <string>HHLoggerHost</string>
        <string>HHLoggerService</string>
        <string>AwxServer64</string>
        <string>AWXMMX32</string>
        <string>AWXLog64</string>
        <string>ScheduleWorXRuntime64</string>
        <string>MGXCoreService</string>
        <string>TwxLog64</string>
      </MiddleTierApps>
    </SecurityConfiguration>
  </FwxServer.Security>

<startup><supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5"/></startup></configuration>
