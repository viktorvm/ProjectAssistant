<?xml version="1.0" encoding="utf-8" ?>
<!--
    *********************************************************************
    HH Logger: OPC UA configuration settings
    Copyright (c) 1986-2012 ICONICS, Inc.
    *********************************************************************
    -->

<OpcUaConfiguration
	xmlns="http://opcfoundation.org/UA/SDK/Configuration.xsd"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:ua="http://opcfoundation.org/UA/2008/02/Types.xsd">

  <!-- A human readable but not necessarily unique name for the application instance -->
  <ApplicationName>HyperHistorian</ApplicationName>

  <!-- A globally unique identifier for the application instance.
		   This value must match the SubjectAltName in the application instance certificate.
		   Note that the demo certificates do not specify SubjectAltName at this time. -->
  <ApplicationUri>urn:localhost:7010:ICONICS:HyperHistorian</ApplicationUri>

  <!-- A globally unique URI for the product (usually assigned by the product vendor) -->
  <ProductUri>urn:iconics.com:ICONICS:HyperHistorian</ProductUri>

  <!-- Indicates the type of application (Server_0, Client_1 or ClientAndServer_2) -->
  <ApplicationType>ClientAndServer_2</ApplicationType>

  <!-- Specifies security related configuration information -->
  <SecurityConfiguration>

    <!-- The location of the application instance certificate in the Windows certificate store -->
    <ApplicationCertificate>
      <StoreType>Directory</StoreType>
      <StorePath>%CommonApplicationData%\OPC Foundation\CertificateStores\MachineDefault</StorePath>

      <!-- The subject for the certificate 
			   Note that subject names are complex structures. The text that appears here is the CommonName component.
			   A complete distinguished would be something like: 'CN=UASampleClient, DC=MACHINENAME'
			   The first certificate found is used if multiple certificates with the same CommonName exist. 
			   The Thumbprint should be specified if the CommonName does not uniquely identify a certificate. -->
      <SubjectName>HyperHistorian</SubjectName>
    </ApplicationCertificate>

    <!-- The list of trusted certification authorities. 
	    
			 Typical web browsing applications trust any certificate issued by a CA in the 
			 "Trusted Root Certification Authorities" certificate store. However, this approach is 
			 not appropriate for UA because Adminstrators have no control over the CAs that get
			 placed in that Root store to facilitate web browsing. This means Adminstrators must
			 specify a different store that is used only for UA related CAs and/or they must explicitly
			 specify the certificate for each trusted certification authority. -->
    <TrustedIssuerCertificates>
      <StoreType>Directory</StoreType>
      <StorePath>%CommonApplicationData%\OPC Foundation\CertificateStores\UA Certificate Authorities</StorePath>
      
      <TrustedCertificates>
        <CertificateIdentifier>
          <StoreName>Root</StoreName>
          <StoreLocation>LocalMachine</StoreLocation>

          <!-- The SubjectName for the CA certificate. -->
          <SubjectName>IcoFwxRoot</SubjectName>

          <!-- The SHA1 thumbprint for the certificate. See comments for the ApplicationInstanceCertificate above. -->
          <!--<Thumbprint>3a35fb798fc6dee8a7e7e4652b0e28fc14c6ee0f</Thumbprint>-->
        </CertificateIdentifier>
      </TrustedCertificates>
    </TrustedIssuerCertificates>

    <!-- The list of trusted application instance certificates. 
	    
			 Some UA applications will use self-signed certificates (certificates without a CA)
			 which means that every application which communicates with it must be configured to 
			 trust it.
	         
			 Adminstrators may designate a certificate store that contains trusted UA application 
			 instance certificates (this store should not be the same as the store used for CAs 
			 certificates). Alternately, Administrators may enter the certificates explicitly in
			 this list.
	         
			 Note that entries in this list may either reference a certificate in the store or
			 may contained the entire certificate encoded as base64 data.
			 -->
    <TrustedPeerCertificates>
      <StoreType>Directory</StoreType>
      <StorePath>%CommonApplicationData%\OPC Foundation\CertificateStores\UA Applications</StorePath>
      
      <TrustedCertificates>
      </TrustedCertificates>
    </TrustedPeerCertificates>

    <RejectedCertificateStore>
      <StoreType>Directory</StoreType>
      <StorePath>%CommonApplicationData%\OPC Foundation\RejectedCertificates</StorePath>
    </RejectedCertificateStore>

    <!-- Applications exchange Nonces during the CreateSession. This value specifies the length. Must be >= 32 -->
    <NonceLength>32</NonceLength>

    <!-- Specifies how to check if a certificate is revoked.
			 Can be NoCheck, Offline or Online
	         
			 If the mode is Offline the the Administrator is responsible for downloading and caching the
			 revocation list for each CA on the local machine.
	         
			 If the mode is Online the Adminstrator must specify the location of the revocation list for
			 each CA.
	         
			 The mechanisms used to manage revocation lists depend on the PKI system used. UA does not 
			 have any specific requirements -->
    <RevocationMode>NoCheck</RevocationMode>
  </SecurityConfiguration>

  <!-- Maps different transports onto a .NET implementation of a WCF Binding
	  
		   WCF bindings are very complex and have many parameters that can be tweeked. To ensure
		   interoperability the SDK has defined 3 standard bindings which can be selected with this
		   element. Developers may define their own Bindings as well provided the inhierit from the 
		   Opc.Ua.Binding.BaseBinding type and implement the same constructor as the built-in binding
		   provide.
	       
		   Note protocols other than HTTP or UA-TCP are not considered to be interoperable -->
  <TransportConfigurations>
    <TransportConfiguration>
      <!-- The prefix on URLs used to identify the protocol -->
      <UriScheme>http</UriScheme>
      <!-- The assembly qualified name for the class that implements the binding -->
      <TypeName>Opc.Ua.Bindings.UaSoapXmlBinding</TypeName>
    </TransportConfiguration>
    <TransportConfiguration>
      <UriScheme>opc.tcp</UriScheme>
      <TypeName>Opc.Ua.Bindings.UaTcpBinding</TypeName>
    </TransportConfiguration>

    <!-- This binding wraps the ANSI C implementation of UA-TCP instead of using the C# implementation. -->
    <!--
		<TransportConfiguration>
		  <UriScheme>opc.tcp</UriScheme>
		  <TypeName>Opc.Ua.NativeStack.NativeStackBinding,Opc.Ua.NativeStack</TypeName>
		</TransportConfiguration>
		-->

    <!-- This binding uses the WCF binary encoded XML over TCP -->
    <!--
		<TransportConfiguration>
		  <UriScheme>net.tcp</UriScheme>
		  <TypeName>Opc.Ua.Bindings.UaSoapXmlOverTcpBinding</TypeName>
		</TransportConfiguration>
		-->
  </TransportConfigurations>

  <!-- Specifies quotas used to by the transport layer -->
  <TransportQuotas>

    <!-- The default timeout in milliseconds for operations (used by clients) -->
    <OperationTimeout>600000</OperationTimeout>

    <!-- The maximum length for a string value in any message -->
    <MaxStringLength>4194304</MaxStringLength>

    <!-- The maximum length for a byte string value in any message -->
    <MaxByteStringLength>4194304</MaxByteStringLength>

    <!-- The maximum length for any array in a message. 
			 Note that some protocols do not distinguish between bytes and arrays. 
			 In these cases the binding will choose the larger of 
			 MaxByteStringLength or MaxArrayLength-->
    <MaxArrayLength>4194304</MaxArrayLength>

    <!-- The maximum size of any message -->
    <MaxMessageSize>16777216</MaxMessageSize>

    <!-- The maximum buffer size 
			 This value controls how big a block of memory the transport layer allocates.
			 Setting this value to a large value will reduce performance and use a lot of RAM -->
    <MaxBufferSize>65535</MaxBufferSize>

    <!-- The lifetime of a SecureChannel in milliseconds.
			 This specifies how long the server will keep a broken channel around while waiting 
			 for a client to reconnect.
			 Not used by HTTP or .NET TCP bindings -->
    <ChannelLifetime>300000</ChannelLifetime>

    <!-- The lifetime of a SecurityToken in milliseconds.
			 This specifies how long a security token can be used without renewal. -->
    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>
  </TransportQuotas>

  <!-- This element only needs to be specified for Server or ClientServer applications -->
  <ServerConfiguration>

    <!-- The set of addresses. One for each supported protocol.
			 Additional URLs are created by appending strings to the base address.
			 For example, a URL used for an endpoint which uses the Basic256 security policy would look like this:
			 http://localhost:6000/UA/SampleClient/Basic256 -->
    <BaseAddresses>
      <ua:String>http://localhost:80/HyperHistorian</ua:String>
      <ua:String>opc.tcp://localhost:7011/HyperHistorian</ua:String>
    </BaseAddresses>

    <!-- The security policies supported by the server.
	         
			 The SDK combines these with the base address to create as many EndpointDescriptions as required.
			 Protocols such as HTTP only allow one SecurityPolicy per endpoint to addition URLs are constructed
			 using the SecurityPolicy and SecurityMode.
	         
			 The first policy in the list is assigned to base address. -->
    <SecurityPolicies>
      <!--
				<ServerSecurityPolicy>
					<SecurityMode>SignAndEncrypt_3</SecurityMode>
					<SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>
					<SecurityLevel>3</SecurityLevel>
				</ServerSecurityPolicy>
				<ServerSecurityPolicy>
					<SecurityMode>Sign_2</SecurityMode>
					<SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>
					<SecurityLevel>1</SecurityLevel>
				</ServerSecurityPolicy>
				-->
      <ServerSecurityPolicy>
        <SecurityMode>None_1</SecurityMode>
        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>
        <SecurityLevel>0</SecurityLevel>
      </ServerSecurityPolicy>
      <!--
				<ServerSecurityPolicy>
					<SecurityMode>SignAndEncrypt_3</SecurityMode>
					<SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>
					<SecurityLevel>4</SecurityLevel>
				</ServerSecurityPolicy>
				<ServerSecurityPolicy>
					<SecurityMode>Sign_2</SecurityMode>
					<SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>
					<SecurityLevel>2</SecurityLevel>
				</ServerSecurityPolicy>
				-->
    </SecurityPolicies>

    <!-- 20100607 - handle leak issue fix; the following are the settings for request thread pool and request queue length. -->
    <MinRequestThreadCount>11</MinRequestThreadCount>
    <MaxRequestThreadCount>1001</MaxRequestThreadCount>
    <MaxQueuedRequestCount>2002</MaxQueuedRequestCount>

    <!-- The SDK expects the server to support the same set of user tokens for every endpoint. -->
    <UserTokenPolicies>
      <!-- Allows anonymous users -->
      <ua:UserTokenPolicy>
        <ua:TokenType>Anonymous_0</ua:TokenType>
      </ua:UserTokenPolicy>

      <!-- Allows username/password -->
      <ua:UserTokenPolicy>
        <ua:TokenType>UserName_1</ua:TokenType>
        <!-- A vendor specific field that indicates what user name database is being used. -->
        <ua:IssuedTokenType>urn:mycompany.com:server</ua:IssuedTokenType>
        <!-- passwords must be encrypted - this specifies what algorithm to use -->
        <ua:SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</ua:SecurityPolicyUri>
      </ua:UserTokenPolicy>

      <!--
				<ua:UserTokenPolicy>
					<ua:TokenType>Certificate_2</ua:TokenType>
					// certificate possession must be proven with a digital signature - this specifies what algorithm to use 
					<ua:SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</ua:SecurityPolicyUri>
				</ua:UserTokenPolicy>
				<ua:UserTokenPolicy>
					// Issued tokens are any type of WS-Security compliant token 
					<ua:TokenType>IssuedToken_3</ua:TokenType>
					// This is a URN assigned by OASIS to SAML Security Tokens 
					<ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>
					// tokens must be encrypted - this specifies what algorithm to use 
					<ua:SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</ua:SecurityPolicyUri>
				</ua:UserTokenPolicy>
        -->
    </UserTokenPolicies>

    <!-- Whether the server updates its diagnostic information -->
    <DiagnosticsEnabled>false</DiagnosticsEnabled>

    <!-- The maximum number of simultaneous sessions -->
    <MaxSessionCount>100</MaxSessionCount>

    <!-- The minimum session lifetime permitted by the server -->
    <MinSessionTimeout>10000</MinSessionTimeout>

    <!-- The maximum session lifetime permitted by the server -->
    <MaxSessionTimeout>3600000</MaxSessionTimeout>

    <!-- The maximum number of browse continuation points per session -->
    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>

    <!-- The maximum number of query continuation points per session -->
    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>

    <!-- The maximum number of history continuation points per session -->
    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>

    <!-- The maximum age of an incoming request -->
    <MaxRequestAge>600000</MaxRequestAge>

    <!-- The minimum allowed publishing interval (in milliseconds) -->
    <MinPublishingInterval>100</MinPublishingInterval>

    <!-- The maximum allowed publishing interval (in milliseconds) -->
    <MaxPublishingInterval>3600000</MaxPublishingInterval>

    <!-- The publishing resolution. Requested publishing intervals are rounded up to the next multiple of this value.-->
    <PublishingResolution>100</PublishingResolution>

    <!-- The maximum subscription lifetime.
	 This controls the maximum keep alive count. Smaller publishing intervals will allow large keep alives
	 provided the maximum subscription lifetime is not exceeded -->
    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>

    <!-- The maximum number of sent messages kept in the queue for each subscription-->
    <MaxMessageQueueSize>10</MaxMessageQueueSize>

    <!-- The maximum number of notifications kept in the queue for each monitored item-->
    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>

    <!-- The maximum number of notifications in a single publish response -->
    <MaxNotificationsPerPublish>100</MaxNotificationsPerPublish>

    <!-- The minimum sampling rate for rarely changing metadata information (such as the server status) -->
    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>

    <!-- The set of supported sampling rates -->
    <AvailableSamplingRates>
      <!-- Specifies 100ms, 200ms, 300ms and 400ms as supported sampling rates. -->
      <SamplingRateGroup>
        <Start>100</Start>
        <Increment>100</Increment>
        <Count>4</Count>
      </SamplingRateGroup>
      <!-- Specifies 500ms and 750ms as supported sampling rates. -->
      <SamplingRateGroup>
        <Start>500</Start>
        <Increment>250</Increment>
        <Count>2</Count>
      </SamplingRateGroup>
      <!-- Specifies any multiple of 1000ms starting at 1000ms as a supported sampling rate. -->
      <SamplingRateGroup>
        <Start>1000</Start>
        <Increment>1000</Increment>
        <Count>0</Count>
      </SamplingRateGroup>
    </AvailableSamplingRates>

    <!-- Servers must create a secure channel with the DiscoveryServer 
	 This element specifies the connection information.
	 Note that server will use the discovery endpoint to update this information -->

    <RegistrationEndpoint>
      <ua:EndpointUrl>http://localhost:52601/UADiscovery/registration</ua:EndpointUrl>
      <ua:Server>
        <ua:ApplicationUri>urn:localhost:Opc.Ua.DiscoveryServer</ua:ApplicationUri>
        <ua:ApplicationType>DiscoveryServer_3</ua:ApplicationType>
        <ua:DiscoveryUrls>
          <ua:String>http://localhost:52601/UADiscovery</ua:String>
          <!-- this is taken from the sample-->
        </ua:DiscoveryUrls>
      </ua:Server>
      <ua:SecurityMode>Sign_2</ua:SecurityMode>
      <ua:SecurityPolicyUri></ua:SecurityPolicyUri>
      <ua:UserIdentityTokens />
      <ua:SecurityLevel>1</ua:SecurityLevel>
    </RegistrationEndpoint>

    <!-- The maximum interval between registration. 0 disables registration -->
    <MaxRegistrationInterval>30000</MaxRegistrationInterval>

    <!-- The file used to save nodes added to the CoreNodeManager. If missing the CoreNodeManger will discard nodes when it stops. -->
    <NodeManagerSaveFile>Opc.Ua.Server.nodes.xml</NodeManagerSaveFile>
  </ServerConfiguration>

  <!-- This element is only required for Client and ClientServer applications -->
  <ClientConfiguration>
    <!-- The default timeout for new sessions -->
    <DefaultSessionTimeout>60000</DefaultSessionTimeout>

    <!-- The well-known URLs for the local discovery servers
	URLs are tested in the order they appear in this list. -->
    <WellKnownDiscoveryUrls>
      <ua:String>http://{0}/UADiscovery/Default.svc</ua:String>
      <ua:String>opc.tcp://{0}:4840</ua:String>
      <ua:String>http://{0}:52601/UADiscovery/Default.svc</ua:String>
    </WellKnownDiscoveryUrls>

    <!-- EndpointDescriptions for system wide discovery servers -->
    <DiscoveryServers />

    <!-- The file used to save the EndpointDescriptions for servers known to the Client -->
    <EndpointCacheFilePath>Opc.Ua.SampleClient.Endpoints.xml</EndpointCacheFilePath>
  </ClientConfiguration>


  <!--
  Masks supported by the trace feature. 
  Servers will detect changes within 5 seconds.
  
  Do not output any messages.
  None = 0x0;

  Output error messages.
  Error = 0x1;

  Output informational messages.
  Information = 0x2;

  Output stack traces.
  StackTrace = 0x4;

  Output basic messages for service calls.
  Service = 0x8;

  Output detailed messages for service calls.
  ServiceDetail = 0x10;

  Output basic messages for each operation.
  Operation = 0x20;

  Output detailed messages for each operation.
  OperationDetail = 0x40;

  Output messages related to application initialization or shutdown
  StartStop = 0x80;

  Output messages related to a call to an external system.
  ExternalSystem = 0x100;
  -->

  <TraceConfiguration>
    <OutputFilePath>c:\OPC Foundation Logs\HHServer.log.txt</OutputFilePath>
    <DeleteOnLoad>true</DeleteOnLoad>
    <TraceMasks>0</TraceMasks>
  </TraceConfiguration>

</OpcUaConfiguration>
